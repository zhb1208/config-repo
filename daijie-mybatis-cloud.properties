#服务名称
spring.application.name=daijie-db-cloud
#服务端口号
server.port=12801

#eureka注册中心地址
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8761/eureka/
#是否设置注册优些IP地址
eureka.instance.preferIpAddress=true

#启用默认执行超时
hystrix.command.default.execution.timeout.enabled=true
#开启重试机制
spring.cloud.loadbalancer.retry.enabled=true
#断路器的超时时间,断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds = 60000
#设置线程池大小
hystrix.threadpool.default.coreSize=100
#请求连接的超时时间
ribbon.ConnectTimeout=20000
#请求处理的超时时间
ribbon.ReadTimeout=1000
#对所有操作请求都进行重试
ribbon.OkToRetryOnAllOperations=true
#对当前实例的重试次数
ribbon.MaxAutoRetries=1
#对下个实例的重试次数
ribbon.MaxAutoRetriesNextServer=2

#读取mapper路径
mybatis.mapperLocations=classpath:/mybatis-mapper/*.xml
#读取model路径
mybatis.typeAliasesPackage=org.daijie.mybatis.model
##读取配置路径
#mybatis.configLocation=classpath\:/mybatis-config.xml

#单数据源配置
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/demo?characterEncoding=UTF-8
#spring.datasource.username=root
#spring.datasource.password=123456
#多数据源配置
spring.datasource.dataSourceType=com.alibaba.druid.pool.DruidDataSource
spring.datasource.names=demo1,demo2
spring.datasource.defaultName=demo1
spring.datasource.demo1.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.demo1.url=jdbc:mysql://localhost:3306/demo1?characterEncoding=UTF-8
spring.datasource.demo1.username=root
spring.datasource.demo1.password=
spring.datasource.demo2.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.demo2.url=jdbc:mysql://localhost:3306/demo2?characterEncoding=UTF-8
spring.datasource.demo2.username=root
spring.datasource.demo2.password=

mapper.notEmpty=false
mapper.identity=MYSQL

#分页插件会自动检测当前的数据库链接，自动选择合适的分页方式
pagehelper.helperDialect=mysql
#默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。
pagehelper.offsetAsPageNum=false
#分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询
pagehelper.reasonable=true
#支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
pagehelper.supportMethodsArguments=true
#为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
pagehelper.params=count=countSql

#文档生成需要扫描的包路径，多个以“,”号隔开
swagger.basePackage=org.daijie.mybatis
#标题
swagger.title=
#描述
swagger.description=
#路径
swagger.termsOfServiceUrl=
#联系方式
swagger.contact=
#版本
swagger.version=1.0

#指定Log4j打印日志包路径的日志级别
logging.level.org.daijie=DEBUG

#对象转json串时，去除为null的属性
spring.jackson.default-property-inclusion=non_null
#指定jackson日期转换格式
spring.jackson.date-format=yyyy-MM-dd HH\:mm\:ss
#指定jackson日期转换时区
spring.jackson.time-zone=Asia/Shanghai

#设置zipkin监控地址
spring.zipkin.baseUrl=http://127.0.0.1:12809
#开启zipkin监控
spring.zipkin.enabled=true

#启用Spring Boot Admin Client
spring.boot.admin.client.enabled=true
#这是一个必填的属性，将当前程序的信息注册到Admin Server中，你需要给出Server URL地址，如果需要注册到多个Admin Server，可以用逗号分隔开来
spring.boot.admin.url=http\://localhost\:12812
#当客户端程序发起注册的时候，需要一个请求地址。
spring.boot.admin.api-path=api/application
#如果Admin端设置了用户名密码访问，你也需要在客户端配置它们。
spring.boot.admin.username=admin
spring.boot.admin.password=admin
#注册间隔（程序启动后多久发出注册请求
spring.boot.admin.period=10000
#如果设置成true，那么上面那个属性就不需要设置了，程序会自动在启动成功后立刻发出注册申请。
spring.boot.admin.auto-registration=true
#当Admin server关闭的时候，自动注销。
spring.boot.admin.auto-deregistration=true
#如果你注册到了多个Admin Server，当他为true的时候，则只会向一个admin server进行注册，否则会同时向所有的admin server进行注册
spring.boot.admin.register-once=true
#客户端的健康监测URL，可以重写（例如Docker中），但是必须唯一。
#spring.boot.admin.client.health-url=
#spring.boot.admin.client.management-url=
#spring.boot.admin.client.service-url=
#默认是false，意味着注册的时候，将会使用机器名进行注册，当设置为true的时候，将会用ip进行注册
spring.boot.admin.client.prefer-ip=false
#安全控制
management.security.enabled=false

eureka.instance.hostname=localhost
eureka.instance.metadata-map.cluster=MAIN

health.config.enabled=true